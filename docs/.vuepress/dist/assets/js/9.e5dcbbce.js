(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{222:function(t,a,s){"use strict";s.r(a);var e=s(28),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"浏览器相关机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器相关机制"}},[t._v("#")]),t._v(" 浏览器相关机制")]),t._v(" "),s("ul",[s("li",[s("h2",{attrs:{id:"doctype-是什么以及作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#doctype-是什么以及作用"}},[t._v("#")]),t._v(" DOCTYPE 是什么以及作用")])])]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{pre:!0,attrs:{class:"token doctype"}},[t._v("<!DOCTYPE html>")]),t._v("\n")])])]),s("p",[t._v("在说 DOCTYPE 之前呢 还是有一个概念要先阐述一下 就是"),s("code",[t._v("DTD(Document type defintion)")]),t._v(" 文档类型定义 DTD 是一系列的语法规则 用来定义 XML 或者 HTML 的文件类型 浏览器会使用它来判断文档类型 决定使用何种协议来解析以及切换浏览器模式")]),t._v(" "),s("p",[t._v("定义看起来挺高大尚甚至有点复杂 其实说人话 就是 DTD 用于告诉浏览器这是啥文档 让浏览器知道用什么模板去解析 有点类似于大家平时生活里用导航去到某一个地方 DTD 就是你输入的地点 浏览器则对应导航软件")]),t._v(" "),s("p",[s("code",[t._v("DOCTYPE")]),t._v(":用来声明文档类型和 DTD 规范的,一个主要的用途就便是文件的合法性验证 如果文件代码不合法 那么浏览器解析便会出一些差错")]),t._v(" "),s("p",[t._v("说人话就是 DOCTYPE 通知浏览器当前的文档是包含了哪个文档类型(DTD)")]),t._v(" "),s("ul",[s("li",[s("h2",{attrs:{id:"浏览器的渲染过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的渲染过程"}},[t._v("#")]),t._v(" 浏览器的渲染过程")])]),t._v(" "),s("li",[t._v("HTML -> 转为 DOM Tree")]),t._v(" "),s("li",[t._v("Style -> 转为 CSS Tree")]),t._v(" "),s("li",[t._v("Layout 通过 CSS Tree 精确计算屏幕上每个 dom 的位置 大小 颜色之类")]),t._v(" "),s("li",[t._v("DOM Tree + CSS Tree -> 转为 Render Tree 这个 Render Tree 也就是 Dom Tree 和 CSS Tree 结合起来的 Tree")]),t._v(" "),s("li",[t._v("Painting -> 浏览器开始通过上面的这些进行渲染")])]),t._v(" "),s("ul",[s("li",[s("p",[t._v("Display -> 显示成像")])]),t._v(" "),s("li",[s("h2",{attrs:{id:"重排-reflow"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重排-reflow"}},[t._v("#")]),t._v(" 重排(Reflow)")])]),t._v(" "),s("li",[s("p",[t._v("什么是重排: DOM 结构中的各个元素都有自己的盒子模型 这些都需要浏览器根据各种样式来计算并根据结果将元素放到它该出现的位置 这个过程就是重排 简单点一句话概括就是 浏览器绘制 DOM 的过程 就是重排")])]),t._v(" "),s("li",[s("p",[t._v("触发 Reflow 的情况")]),t._v(" "),s("ul",[s("li",[t._v("增加、删除、修改DOM节点时 会导致重排或者重绘")]),t._v(" "),s("li",[t._v("当移动Dom的位置 或者有动画的情况")]),t._v(" "),s("li",[t._v("当修改CSS样式的时候")]),t._v(" "),s("li",[t._v("当触发浏览器的Resize或者是Scroll")]),t._v(" "),s("li",[t._v("修改网页的默认字体 (特别不推荐页面渲染完以后 修改网页的字体)")])])]),t._v(" "),s("li",[s("h2",{attrs:{id:"重绘-repaint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重绘-repaint"}},[t._v("#")]),t._v(" 重绘(Repaint)")])]),t._v(" "),s("li",[s("p",[t._v("什么是重绘: 当各种盒子的位置、大小以及其他属性都确定以后 浏览器把元素按照各自特性绘制 这个过程就是重绘 概括一下就是 页面要呈现的内容 统统都已经画在屏幕上了")])]),t._v(" "),s("li",[s("p",[t._v("触发Repaint的情况:")]),t._v(" "),s("ul",[s("li",[t._v("DOM改动")]),t._v(" "),s("li",[t._v("CSS改动")]),t._v(" "),s("li",[t._v("其实就是 页面显示的内容如果发生变化 一定就会触发浏览器的重绘")])])])]),t._v(" "),s("h2",{attrs:{id:"提升页面性能的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#提升页面性能的方法"}},[t._v("#")]),t._v(" 提升页面性能的方法")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("资源压缩合并 减少Http请求")])]),t._v(" "),s("li",[s("p",[t._v("非核心代码异步加载 -> 异步加载的方式 -> 异步加载的区别")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"异步加载的方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步加载的方式"}},[t._v("#")]),t._v(" 异步加载的方式")])])]),t._v(" "),s("ol",[s("li",[t._v("动态脚本加载")])]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" scprit "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("createElement")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'script'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nscrpit"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/javascript'")]),t._v("\ndocument"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("apped")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("script"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("defer\n在"),s("code",[t._v("script")]),t._v("标签上添加这个属性")]),t._v(" "),s("li",[t._v("async\n同上")])]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"异步加载的区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#异步加载的区别"}},[t._v("#")]),t._v(" 异步加载的区别")])])]),t._v(" "),s("ol",[s("li",[s("code",[t._v("defer")]),t._v("是在HTML解析完之后才执行 如果是多个 按照加载顺序依次执行")]),t._v(" "),s("li",[s("code",[t._v("async")]),t._v("是在加载完之后立即执行 如果是多个 执行顺序和加载顺序无关")])])]),t._v(" "),s("li",[s("p",[t._v("利用浏览器缓存 -> 缓存的分类 -> 缓存的原理")]),t._v(" "),s("ul",[s("li",[s("h4",{attrs:{id:"缓存的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓存的分类"}},[t._v("#")]),t._v(" 缓存的分类")])]),t._v(" "),s("li",[s("h5",{attrs:{id:"概念-缓存-各资源文件在浏览器中的备份-其实就可以理解成-资源文件存在了本地-直接从本地读取-而不是再次请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念-缓存-各资源文件在浏览器中的备份-其实就可以理解成-资源文件存在了本地-直接从本地读取-而不是再次请求"}},[t._v("#")]),t._v(" 概念: 缓存 => 各资源文件在浏览器中的备份 其实就可以理解成 资源文件存在了本地 直接从本地读取 而不是再次请求")])])]),t._v(" "),s("ol",[s("li",[t._v("强缓存 (览器不会询问 而是直接就用)")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("// http-header中的两个字段 一个是过期时间 这个是服务器的绝对时间\nExpiress Expires:Thu, 9 Jul 2019 20:26:30 GMT\n// 另一个是相对时间 也就是客户端在1000秒之内不会再请求服务器 \nCache-Control Cache-Control:max-age=1000\n")])])]),s("ol",{attrs:{start:"2"}},[s("li",[t._v("协商缓存 (浏览器发现本地有文件 但是不确定是否使用 需要询问服务器)")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Last-Modified\nIf-Modified-Since\nEtag\nIf-None-Match\n")])])])]),t._v(" "),s("li",[s("p",[t._v("使用CDN")])]),t._v(" "),s("li",[s("p",[t._v("预解析DNS")])])]),t._v(" "),s("div",{staticClass:"language-html extra-class"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("// 大部分的浏览器在http协议下 默认开启预解析 但是在https协议下不会\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("//host_name_to_prefetch.com"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n// 强制打开预解析\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("x-dns-prefetch-control"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("on"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);